import { HitObject } from "./HitObject";
import { Vector2 } from "../../Vector2";
import SliderPath = require("../../../SliderPath");
import { HeadCircle } from "./SliderObjects/HeadCircle";
import { TailCircle } from "./SliderObjects/TailCircle";
/**
 * Class for sliders
 */
export declare class Slider extends HitObject {
    EndPosition: Vector2;
    EndTime: number;
    Duration: number;
    Path: SliderPath;
    RepeatCount: number;
    NestedHitObjects: Array<HitObject>;
    TickDistance: number;
    LazyEndPosition: Vector2;
    LazyTravelDistance: number;
    SpanDuration: number;
    LegacyLastTickOffset: number;
    HeadCircle: HeadCircle;
    TailCircle: TailCircle;
    private Velocity;
    private SpanCount;
    /**
     *
     * @param pos The raw position of the slider (as listed in the .osu file)
     * @param startTime The start time of the slider
     * @param path The calculated slider path of the slider
     * @param repeatCount The number of repeats this slider has
     * @param speedMultiplier The speed multiplier of this slider compared to the base bpm
     * @param beatLength The length of one beat in ms at this point in the map
     * @param mapDifficulty The difficulty settings of the beatmap
     * @param radius The radius of the slider head circle
     */
    constructor(pos: Vector2, startTime: number, path: SliderPath, repeatCount: number, speedMultiplier: number, beatLength: number, mapDifficulty: any, radius: number);
    private calculateEndTimeAndTickDistance;
    /**
     * Creates the nested hit objects (head and tail circle, slider ticks and repeat points) for this slider
     */
    private createNestedHitObjects;
    private createSliderEnds;
    private createSliderTicks;
    private createRepeatPoints;
}
