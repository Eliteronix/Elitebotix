"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Vector2 {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    ;
    add(vector) {
        return new Vector2(this.x + vector.x, this.y + vector.y);
    }
    ;
    subtract(vector) {
        return new Vector2(this.x - vector.x, this.y - vector.y);
    }
    ;
    scale(scaleFactor) {
        return new Vector2(this.x * scaleFactor, this.y * scaleFactor);
    }
    ;
    divide(divideFactor) {
        if (divideFactor === 0)
            throw new Error("Attempt to divide vector by 0");
        return new Vector2(this.x / divideFactor, this.y / divideFactor);
    }
    ;
    dot(vector) {
        return this.x * vector.x + this.y * vector.y;
    }
    ;
    length() {
        return Math.sqrt((this.x * this.x) + (this.y * this.y));
    }
    ;
    lengthSquared() {
        return Math.pow(this.length(), 2);
    }
    ;
    distance(vector) {
        const x = this.x - vector.x;
        const y = this.y - vector.y;
        const dist = x * x + y * y;
        return Math.sqrt(dist);
    }
    ;
    clone() {
        return new Vector2(this.x, this.y);
    }
    ;
    normalize() {
        const length = this.length();
        this.x /= length;
        this.y /= length;
    }
    ;
    almostEquals(vec2, acceptableDifference) {
        function checkNumbers(value1, value2) {
            return Math.abs(value1 - value2) <= acceptableDifference;
        }
        ;
        return checkNumbers(this.x, vec2.x) && checkNumbers(this.y, vec2.y);
    }
    ;
}
exports.Vector2 = Vector2;
;
