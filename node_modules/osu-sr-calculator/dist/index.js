"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const osu_service_1 = require("./osu-service");
const BeatmapParser_1 = require("./BeatmapParser");
const DifficultyHitObjectCreator_1 = require("./DifficultyHitObjectCreator");
const StarRatingCalculator_1 = require("./StarRatingCalculator");
const osuService = new osu_service_1.OsuService();
const beatmapParser = new BeatmapParser_1.default();
const difficultyHitObjectCreator = new DifficultyHitObjectCreator_1.default();
const starRatingCalculator = new StarRatingCalculator_1.default();
let Beatmap = null;
function calculateStarRating(map_id, mods, allCombinations, returnAllDifficultyValues = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const map = yield getOsuBeatmap(map_id);
        if (map === null)
            throw new Error("No map found for specified map id");
        mods = parseMods(mods);
        let output = {};
        if (!allCombinations) {
            const label = mods.length > 0 ? mods.join('') : "nomod";
            const response = calculateNextModCombination(map, mods, true);
            output[label] = returnAllDifficultyValues ? response : response.total;
            return output;
        }
        else {
            const allModCombinations = getAllModCombinations();
            allModCombinations.forEach(combi => {
                const label = combi.mods.length > 0 ? combi.mods.join('') : "nomod";
                const response = calculateNextModCombination(map, combi.mods, combi.reParse);
                output[label] = returnAllDifficultyValues ? response : response.total;
            });
            return output;
        }
    });
}
exports.calculateStarRating = calculateStarRating;
function calculateNextModCombination(map, mods, reParse) {
    if (reParse)
        Beatmap = beatmapParser.parseBeatmap(map, mods);
    const timeRate = getTimeRate(mods);
    const difficultyHitObjects = difficultyHitObjectCreator.convertToDifficultyHitObjects(Beatmap.HitObjects, timeRate);
    return starRatingCalculator.calculate(difficultyHitObjects, timeRate);
}
;
function getOsuBeatmap(map_id) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield osuService.getOsuBeatmap(map_id);
    });
}
;
function parseMods(mods) {
    if (mods === undefined)
        return [];
    return mods;
}
;
function getTimeRate(mods) {
    if (mods.includes("DT"))
        return 1.5;
    if (mods.includes("HT"))
        return 0.75;
    return 1;
}
;
function getAllModCombinations() {
    return [
        { mods: [], reParse: true },
        { mods: ["DT"], reParse: false },
        { mods: ["HT"], reParse: false },
        { mods: ["HR"], reParse: true },
        { mods: ["HR", "DT"], reParse: false },
        { mods: ["HR", "HT"], reParse: false },
        { mods: ["EZ"], reParse: true },
        { mods: ["EZ", "DT"], reParse: false },
        { mods: ["EZ", "HT"], reParse: false }
    ];
}
;
