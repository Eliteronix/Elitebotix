"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Aim_1 = require("./Skills/Aim");
const Speed_1 = require("./Skills/Speed");
;
class StarRatingCalculator {
    constructor() {
        this.section_length = 400;
        this.difficulty_multiplier = 0.0675;
    }
    calculate(hitObjects, timeRate) {
        var _a;
        this.hitObjects = hitObjects;
        let aimSkill = new Aim_1.Aim();
        let speedSkill = new Speed_1.Speed();
        const sectionLength = this.section_length * timeRate;
        let currentSectionEnd = Math.ceil((((_a = this.hitObjects[0]) === null || _a === void 0 ? void 0 : _a.StartTime) || 0) / sectionLength) * sectionLength;
        this.hitObjects.forEach(h => {
            // console.log("JumpDistance:", h.JumpDistance, "- TravelDistance:", h.TravelDistance, "- DeltaTime:", h.DeltaTime, "- StrainTime:", h.StrainTime, "- Angle:", h.Angle);
            while (h.CurrentObject.StartTime > currentSectionEnd) {
                aimSkill.saveCurrentPeak();
                aimSkill.startNewSectionFrom(currentSectionEnd);
                speedSkill.saveCurrentPeak();
                speedSkill.startNewSectionFrom(currentSectionEnd);
                currentSectionEnd += sectionLength;
            }
            aimSkill.process(h);
            speedSkill.process(h);
        });
        aimSkill.saveCurrentPeak();
        speedSkill.saveCurrentPeak();
        const aimRating = Math.sqrt(aimSkill.difficultyValue()) * this.difficulty_multiplier;
        const speedRating = Math.sqrt(speedSkill.difficultyValue()) * this.difficulty_multiplier;
        const starRating = aimRating + speedRating + Math.abs(aimRating - speedRating) / 2;
        return { aim: aimRating, speed: speedRating, total: starRating };
    }
}
;
exports.default = StarRatingCalculator;
