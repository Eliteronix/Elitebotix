"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Skill_1 = require("./Skill");
class Aim extends Skill_1.Skill {
    constructor() {
        super(...arguments);
        this.angle_bonus_begin = Math.PI / 3;
        this.timing_threshold = 107;
        this.SkillMultiplier = 26.25;
        this.StrainDecayBase = 0.15;
    }
    strainValueOf(currentObject) {
        let result = 0;
        const scale = 90;
        function applyDiminishingExp(val) {
            return Math.pow(val, 0.99);
        }
        ;
        if (this.Previous.length > 0) {
            if (currentObject.Angle !== null && currentObject.Angle !== undefined && currentObject.Angle > 0 && currentObject.Angle > this.angle_bonus_begin) {
                let angleBonus = Math.sqrt(Math.max(this.Previous[0].JumpDistance - scale, 0) *
                    Math.pow(Math.sin(currentObject.Angle - this.angle_bonus_begin), 2) *
                    Math.max(currentObject.JumpDistance - scale, 0));
                result = 1.5 * applyDiminishingExp(Math.max(0, angleBonus)) / Math.max(this.timing_threshold, this.Previous[0].StrainTime);
            }
        }
        const jumpDistanceExp = applyDiminishingExp(currentObject.JumpDistance);
        const travelDistanceExp = applyDiminishingExp(currentObject.TravelDistance);
        let returnValue = Math.max(result + (jumpDistanceExp + travelDistanceExp + Math.sqrt(travelDistanceExp * jumpDistanceExp)) / Math.max(currentObject.StrainTime, this.timing_threshold), (Math.sqrt(travelDistanceExp * jumpDistanceExp) + jumpDistanceExp + travelDistanceExp) / currentObject.StrainTime);
        return returnValue;
    }
    ;
}
exports.Aim = Aim;
;
